<?php
// $Id: simplefeed_item.install,v 1.9.2.5 2008/06/11 05:16:58 m3avrck Exp $

/**
 * Implementation of hook_install().
 */
function simplefeed_item_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE {simplefeed_feed_item} (
        vid int unsigned NOT NULL,
        nid int unsigned NOT NULL,
        iid varchar(32) NOT NULL,
        fid int unsigned NOT NULL,
        expires int unsigned NOT NULL default '0',
        url text,
        PRIMARY KEY (vid),
        KEY nid (nid),
        KEY iid (iid),
        KEY fid (fid)
      ) /*!40100 DEFAULT CHARACTER SET UTF8 */ ");
      break;
    case 'pgsql':
      db_query("CREATE TABLE {simplefeed_feed_item} (
        vid int_unsigned NOT NULL,
        nid int_unsigned NOT NULL,
        iid varchar(32) NOT NULL,
        fid int_unsigned NOT NULL,
        expires int_unsigned NOT NULL default '0',
        url text,
        PRIMARY KEY (vid)
      )");
      db_query("CREATE INDEX {simplefeed_feed_item}_nid_idx ON {simplefeed_feed_item} (nid)");
      db_query("CREATE INDEX {simplefeed_feed_item}_url_idx ON {simplefeed_feed_item} (iid)");
      db_query("CREATE INDEX {simplefeed_feed_item}_fid_idx ON {simplefeed_feed_item} (fid)");
      break;
  }

  drupal_set_message(t('SimpleFeed Item successfully installed.'));
}

/**
 * Implementation of hook_uninstall().
 */
function simplefeed_item_uninstall() {
  db_query('DROP TABLE {simplefeed_feed_item}');
  node_type_delete('feed_item');
}

function simplefeed_item_update_1() {
  // this update should never run, it does not work correctly
  // and update 2 takes care of this update but uses the new updated IIDs
  // rendering this update useless anywho
  return;
}

function simplefeed_item_update_2() {
  // How many feed items to process each time.
  $limit = 50;

  // Set-up multipart update.
  if (!isset($_SESSION['simplefeed_item_update_2'])) {
    $_SESSION['simplefeed_item_update_2'] = array(
      'vid' => 0,
      'max' => db_result(db_query('SELECT MAX(vid) FROM {simplefeed_feed_item}')),
      'count' => 0,
    );
  }
  
  // Fetch up to N feed items and update their iids to new schema
  $count = $_SESSION['simplefeed_item_update_2']['count'];
  $feed_items = db_query_range('SELECT r.vid, r.title, s.url FROM {node_revisions} r JOIN {simplefeed_feed_item} s ON r.vid = s.vid ORDER BY r.vid ASC', $count, $limit);
  while ($feed_item = db_fetch_object($feed_items)) {
    $iid = md5($feed_item->title . $feed_item->url);
    db_query("UPDATE {simplefeed_feed_item} SET iid = '%s' WHERE vid = %d", $iid, $feed_item->vid);
    $_SESSION['simplefeed_item_update_2']['vid'] = $feed_item->vid;    
  }

  if (db_num_rows($feed_items) == $limit) {
    $_SESSION['simplefeed_item_update_2']['count'] += $limit;
    // Return progress (never return 100% here to ensure clean-up is still run last).
    return array('#finished' => $_SESSION['simplefeed_item_update_2']['vid'] / ($_SESSION['simplefeed_item_update_2']['max'] + 1));
  }
  else {
    // Clean-up.
    unset($_SESSION['simplefeed_item_update_2']);
    return array();
  }
}

function simplefeed_item_update_3() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {simplefeed_feed_item} CHANGE url url text");
  $ret[] = update_sql("ALTER TABLE {simplefeed_feed_item} CHANGE iid iid varchar(32) NOT NULL");  
  return $ret;
}